{"ast":null,"code":"import _classCallCheck from\"/Users/rollinskevin/sorting-visualizer/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/rollinskevin/sorting-visualizer/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/rollinskevin/sorting-visualizer/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/rollinskevin/sorting-visualizer/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React from\"react\";import'../SortingVisualizer/SortingVisualizer.css';// Change this value for the number of bars (value) in the array.\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var NUMBER_OF_ARRAY_BARS=210;// This is the main color of the array bars.\nvar PRIMARY_COLOR='NAVY-BLUE';var SortingVisualizer=/*#__PURE__*/function(_React$Component){_inherits(SortingVisualizer,_React$Component);var _super=_createSuper(SortingVisualizer);function SortingVisualizer(props){var _this;_classCallCheck(this,SortingVisualizer);_this=_super.call(this,props);_this.state={array:[]};return _this;}_createClass(SortingVisualizer,[{key:\"componentDidMount\",value:function componentDidMount(){this.resetArray();}},{key:\"resetArray\",value:function resetArray(){var array=[];for(var i=0;i<NUMBER_OF_ARRAY_BARS;i++){array.push(randomIntFromInterval(5,730));}this.setState({array:array});}},{key:\"quickSort\",value:function quickSort(){// We leave it as an exercise to the viewer of this code to implement this method.\n}},{key:\"heapSort\",value:function heapSort(){// We leave it as an exercise to the viewer of this code to implement this method.\n}},{key:\"bubbleSort\",value:function bubbleSort(){// We leave it as an exercise to the viewer of this code to implement this method.\n}},{key:\"render\",value:function render(){var _this2=this;var array=this.state.array;return/*#__PURE__*/_jsxs(\"div\",{className:\"array-container\",children:[array.map(function(value,idx){return/*#__PURE__*/_jsx(\"div\",{className:\"array-bar\",style:{backgroundColor:PRIMARY_COLOR,height:\"\".concat(value,\"px\")}},idx);}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return _this2.resetArray();},children:\"Generate New Array\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return _this2.mergeSort();},children:\"Merge Sort\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return _this2.quickSort();},children:\"Quick Sort\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return _this2.heapSort();},children:\"Heap Sort\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return _this2.bubbleSort();},children:\"Bubble Sort\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return _this2.testSortingAlgorithms();},children:\"Test Sorting Algorithms (BROKEN)\"})]});}}]);return SortingVisualizer;}(React.Component);export{SortingVisualizer as default};function randomIntFromInterval(min,max){// min and max included\nreturn Math.floor(Math.random()*(max-min+1)+min);}","map":{"version":3,"names":["React","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SortingVisualizer","props","state","array","resetArray","i","push","randomIntFromInterval","setState","map","value","idx","backgroundColor","height","mergeSort","quickSort","heapSort","bubbleSort","testSortingAlgorithms","Component","min","max","Math","floor","random"],"sources":["/Users/rollinskevin/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"sourcesContent":["import React from \"react\";\nimport '../SortingVisualizer/SortingVisualizer.css';\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 210;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'NAVY-BLUE';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n  \n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n    this.setState({array});\n  }\n\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        <button onClick={() => this.testSortingAlgorithms()}>\n          Test Sorting Algorithms (BROKEN)\n        </button>\n      </div>\n    );\n  }\n}\n\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"],"mappings":"geAAA,MAAOA,MAAP,KAAkB,OAAlB,CACA,MAAO,4CAAP,CAEA;wFACA,GAAMC,qBAAoB,CAAG,GAA7B,CAEA;AACA,GAAMC,cAAa,CAAG,WAAtB,C,GAEqBC,kB,kIACnB,2BAAYC,KAAZ,CAAmB,mDACjB,uBAAMA,KAAN,EAEA,MAAKC,KAAL,CAAa,CACXC,KAAK,CAAE,EADI,CAAb,CAHiB,aAMlB,C,+DAGD,4BAAoB,CAClB,KAAKC,UAAL,GACD,C,0BAED,qBAAa,CACX,GAAMD,MAAK,CAAG,EAAd,CACA,IAAK,GAAIE,EAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGP,oBAApB,CAA0CO,CAAC,EAA3C,CAA+C,CAC7CF,KAAK,CAACG,IAAN,CAAWC,qBAAqB,CAAC,CAAD,CAAI,GAAJ,CAAhC,EACD,CACD,KAAKC,QAAL,CAAc,CAACL,KAAK,CAALA,KAAD,CAAd,EACD,C,yBAED,oBAAY,CACV;AACD,C,wBAED,mBAAW,CACT;AACD,C,0BAED,qBAAa,CACX;AACD,C,sBAED,iBAAS,iBACP,GAAOA,MAAP,CAAgB,KAAKD,KAArB,CAAOC,KAAP,CAEA,mBACE,aAAK,SAAS,CAAC,iBAAf,WACGA,KAAK,CAACM,GAAN,CAAU,SAACC,KAAD,CAAQC,GAAR,qBACT,YACE,SAAS,CAAC,WADZ,CAGE,KAAK,CAAE,CACLC,eAAe,CAAEb,aADZ,CAELc,MAAM,WAAKH,KAAL,MAFD,CAHT,EAEOC,GAFP,CADS,EAAV,CADH,cAUE,eAAQ,OAAO,CAAE,yBAAM,OAAI,CAACP,UAAL,EAAN,EAAjB,gCAVF,cAWE,eAAQ,OAAO,CAAE,yBAAM,OAAI,CAACU,SAAL,EAAN,EAAjB,wBAXF,cAYE,eAAQ,OAAO,CAAE,yBAAM,OAAI,CAACC,SAAL,EAAN,EAAjB,wBAZF,cAaE,eAAQ,OAAO,CAAE,yBAAM,OAAI,CAACC,QAAL,EAAN,EAAjB,uBAbF,cAcE,eAAQ,OAAO,CAAE,yBAAM,OAAI,CAACC,UAAL,EAAN,EAAjB,yBAdF,cAeE,eAAQ,OAAO,CAAE,yBAAM,OAAI,CAACC,qBAAL,EAAN,EAAjB,8CAfF,GADF,CAqBD,C,+BA1D4CrB,KAAK,CAACsB,S,SAAhCnB,iB,aA8DrB,QAASO,sBAAT,CAA+Ba,GAA/B,CAAoCC,GAApC,CAAyC,CACvC;AACA,MAAOC,KAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,IAAiBH,GAAG,CAAGD,GAAN,CAAY,CAA7B,EAAkCA,GAA7C,CAAP,CACD"},"metadata":{},"sourceType":"module"}